-------------------------------------------------------------
SECTION 1: BASICS OF JAVASCRIPT (NODE.JS FOCUSED)
-------------------------------------------------------------

1.1 What is JavaScript (JS) and its uses
----------------------------------------
- JavaScript is a high-level, interpreted scripting language.
- It is dynamic and weakly typed (no fixed data type needed).
- It can run on both client (browser) and server (Node.js).

Dynamic & Weakly Typed Example:
    let x = 10;       // number
    x = "hello";      // now string (allowed in JS)

Uses in Node.js:
- Backend logic (APIs, authentication, database handling)
- File handling (read/write files)
- Modules and packages (via npm)

------------------------------------------------------------

1.2 JavaScript vs Java
-----------------------

JavaScript (JS):
- Dynamically typed → variable type can change at runtime.
- Prototype-based OOP → objects inherit from other objects directly.
- Function & block scoped variables:
    var   → function-scoped
    let   → block-scoped
    const → block-scoped
- First-class functions → can be stored in variables, passed, or returned.
- Supports async programming (callbacks, promises, async/await).

Example (scoping):
    if (true) {
        var a = 10;    // accessible outside block
        let b = 20;    // only inside block
    }
    console.log(a); // works
    console.log(b); // error

Java:
- Statically typed → must declare type, cannot change later.
    int x = 10;
    x = "hello";   // ❌ Error
- Class-based OOP → everything is defined inside classes.
- Variables have strict types → cannot change type at runtime.
- Compiled before execution, strongly typed.

------------------------------------------------------------

✨ Simple Summary:
- JavaScript → flexible, lightweight, forgiving, runs in browser & server.
- Java       → strict, heavy, rule-based, runs on JVM (compiled).


1.3 Output in Node.js
---------------------
- console.log()  → print messages in terminal / Node REPL
- Example:
  console.log("Hello Node.js");

1.4 Comments
-------------
- Single-line: // comment
- Multi-line: /* comment */

1.5 Variables
-------------
- var: function-scoped, can be redeclared (avoid in Node)
- let: block-scoped, can be reassigned
- const: block-scoped, cannot be reassigned

Examples:
var a = 10;
let b = 20;
const c = 30;

1.6 Data Types
---------------
JavaScript has two main categories of data types:

1.6.1 Primitive (single value, immutable):
-----------------------------------------
- string   : sequence of characters
  Example: let name = "Hello";

- number   : integers & decimals (no int/float split like Java)
  Example: let age = 10;
           let pi = 3.14;

- boolean  : true / false
  Example: const isAdmin = false;

- null     : explicitly no value (you assign it on purpose)
  Example: let emptyValue = null;

- undefined: variable declared but not initialized
  Example: let notAssigned;
           console.log(notAssigned); // undefined

- symbol   : unique identifier (often used as object keys)
  Example: const sym = Symbol("id");

- bigint   : very large integers (beyond Number range)
  Example: const big = 123456789012345678901234567890n;

1.6.2 Non-primitive (reference types):
--------------------------------------
- Object   : collection of key-value pairs
  Example: const person = { name: "Ajay", age: 30 };

- Array    : special type of object, ordered list
  Example: let nums = [1, 2, 3];

- Function : also an object type in JS
  Example: const greet = () => console.log("Hello");

-------------------------------------------------------------
About var, let, const
---------------------
- var
  * Function-scoped
  * Can be redeclared and updated
  * Hoisted (accessible before declaration, but undefined)
  * Generally avoided in modern JS

- let
  * Block-scoped
  * Can be updated, but not redeclared in same scope
  * Preferred for variables that change

- const
  * Block-scoped
  * Cannot be reassigned (value fixed), but object/array
    properties inside can still be changed
  * Preferred by default for safer code
-------------------------------------------------------------

1.7 Type Checking
-----------------
- typeof: check data type
Example:
let x = 10;
console.log(typeof x); // number

- instanceof: check if object is instance of class
console.log(person instanceof Object); // true

1.8 Type Conversion / Coercion
--------------------------------
- Explicit conversion:
let str = String(123);       // "123"
let num = Number("456");     // 456
let bool = Boolean(0);       // false

- Automatic coercion:
console.log("5" + 2);  // "52" (string)
console.log("5" - 2);  // 3   (number)

1.9 Good Practices
------------------
- Use let/const instead of var
- Use const by default; let only if reassignment needed
- Prefer explicit type conversion for clarity
- Focus on Node.js-relevant JS (skip DOM/browser-specific features)

-------------------------------------------------------------
