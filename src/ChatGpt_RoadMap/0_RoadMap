-------------------------------------------------------------
JAVASCRIPT ROADMAP FOR NODE.JS & EXPRESS (BEGINNER → ADVANCED)
-------------------------------------------------------------
Sections 1–7: Core JS (basics, operators, control flow, functions, objects, arrays, strings)

Section 8: Modern ES6+ features

Sections 9–10: Asynchronous JS and error handling

Sections 11–12: JSON/data handling and JS OOP/classes

Sections 13–14: Modules, Node.js prep, and advanced JS topics

1. BASICS OF JAVASCRIPT
----------------------
1.1 What is JavaScript (JS) and its uses
1.2 JS in browser vs Node.js
1.3 Embedding JS in HTML (<script> tag)
1.4 Output methods: console.log(), alert(), document.write()
1.5 Comments: // single-line, /* multi-line */
1.6 Variables: var, let, const
     - Scope differences: function scope, block scope
1.7 Data types:
     - Primitive: string, number, boolean, null, undefined, symbol, bigint
     - Non-primitive: object
1.8 Type checking: typeof, instanceof
1.9 Type conversion and coercion:
     - String(), Number(), Boolean(), parseInt(), parseFloat()

2. OPERATORS
------------
2.1 Arithmetic: +, -, *, /, %, ++, --
2.2 Assignment: =, +=, -=, *=, /=
2.3 Comparison: ==, ===, !=, !==, >, <, >=, <=
2.4 Logical: &&, ||, !
2.5 Ternary operator: condition ? value1 : value2
2.6 Operator precedence

3. CONTROL FLOW
---------------
3.1 Conditional statements: if, else if, else
3.2 Switch statement
3.3 Loops: for, while, do...while
3.4 Loop control: break, continue
3.5 For-in loop (objects), For-of loop (arrays/iterables)

4. FUNCTIONS
------------
4.1 Function declaration vs function expression
4.2 Function parameters & arguments
4.3 Return values
4.4 Arrow functions: () => { }
4.5 Default parameters
4.6 Rest parameters (...args)
4.7 Closures
4.8 Immediately Invoked Function Expression (IIFE)
4.9 Callback functions

5. OBJECTS
----------
5.1 Object literals
5.2 Accessing properties: dot notation, bracket notation
5.3 Adding, updating, deleting properties
5.4 Object methods
5.5 'this' keyword
5.6 Object destructuring
5.7 Object.keys(), Object.values(), Object.entries()
5.8 Nested objects

6. ARRAYS
---------
6.1 Creating arrays
6.2 Accessing elements, updating, deleting
6.3 Array methods:
     - Mutating: push(), pop(), shift(), unshift(), splice(), sort(), reverse()
     - Non-mutating: slice(), concat(), join(), includes(), indexOf(), find(), filter(), map(), reduce(), forEach()
6.4 Array destructuring
6.5 Nested / multidimensional arrays

7. STRINGS
----------
7.1 String creation: '', "", ``
7.2 String properties: length
7.3 String methods: toUpperCase(), toLowerCase(), trim(), split(), substring(), slice(), includes(), indexOf(), replace(), repeat(), startsWith(), endsWith()
7.4 Template literals: `Hello ${name}`
7.5 String concatenation

8. ES6+ MODERN JS
-----------------
8.1 let and const (block scope)
8.2 Template literals
8.3 Arrow functions
8.4 Default/rest/spread operators
8.5 Destructuring (arrays & objects)
8.6 Enhanced object literals
8.7 For-of loop
8.8 Modules: export / import
8.9 Optional chaining (?.)
8.10 Nullish coalescing (??)
8.11 Shorthand property names
8.12 Short-circuit evaluation

9. ASYNCHRONOUS JAVASCRIPT
--------------------------
9.1 Callbacks
9.2 Promises: new Promise(), then(), catch(), finally()
9.3 Async/Await
9.4 Event loop basics
9.5 setTimeout(), setInterval(), clearTimeout(), clearInterval()
9.6 Callback hell and avoiding it

10. ERROR HANDLING
-----------------
10.1 try, catch, finally
10.2 throw keyword
10.3 Custom error handling

11. JSON & DATA HANDLING
-----------------------
11.1 JSON syntax
11.2 JSON.parse(), JSON.stringify()
11.3 Working with objects and arrays in JSON
11.4 Fetching data:
     - Browser: fetch()
     - Node.js: axios, node-fetch

12. JAVASCRIPT CLASSES & OOP
----------------------------
12.1 Class syntax
12.2 Constructor
12.3 Methods
12.4 Inheritance: extends, super
12.5 Static methods
12.6 'this' in classes
12.7 Encapsulation: private fields (#field)
12.8 Getters & Setters

13. MODULES & NODE.JS PREP
--------------------------
13.1 ES6 modules (import/export) vs CommonJS (require/module.exports)
13.2 Organizing code in multiple files
13.3 Node.js globals: __dirname, __filename, global
13.4 NPM basics: installing packages, package.json
13.5 require() and module.exports

14. ADVANCED TOPICS (NODE.JS READY)
----------------------------------
14.1 Closures (revisited)
14.2 Call stack & memory
14.3 Hoisting (var, let, const, function)
14.4 Event loop & non-blocking I/O
14.5 Higher-order functions (map, filter, reduce)
14.6 Callback hell and async patterns
14.7 Regular expressions for validation
14.8 Destructuring with defaults
14.9 Spread operator in objects and arrays
14.10 Rest operator in functions

-------------------------------------------------------------
LEARNING ORDER SUGGESTION
-------------------------
Step 1: Basics → Operators → Control Flow → Functions
Step 2: Arrays & Strings → Objects → ES6 Features
Step 3: Async JS → Error Handling → JSON → Classes
Step 4: Modules → Node.js specific prep → Advanced topics
-------------------------------------------------------------

