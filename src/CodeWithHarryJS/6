-------------------------------------------------------------
JAVASCRIPT TUTORIAL – SECTION 6: ARRAYS
(Timestamp: 03:40 – 04:20 hrs)
-------------------------------------------------------------

1. INTRODUCTION TO ARRAYS
-------------------------
1.1 Arrays are ordered collections of values.
1.2 Each value is stored at an index (0-based).
1.3 Can store mixed data types (string, number, boolean, objects, functions).
1.4 Commonly used to store lists of items.

Example:
    const fruits = ["apple", "banana", "mango"];
    const mixed = [1, "Ajay", true, { age: 30 }, [10, 20]];

-------------------------------------------------------------

2. ACCESSING ARRAY ELEMENTS
---------------------------
2.1 Access by index:
    console.log(fruits[0]); // apple
    console.log(fruits[2]); // mango

2.2 Length property:
    console.log(fruits.length); // 3

-------------------------------------------------------------

3. MODIFYING ARRAYS
-------------------
3.1 Update element:
    fruits[1] = "grapes";
    console.log(fruits); // ["apple", "grapes", "mango"]

3.2 Add new element:
    fruits[3] = "orange";

-------------------------------------------------------------

4. ARRAY METHODS – BASICS
-------------------------
4.1 push() → add at end
    fruits.push("pineapple");

4.2 pop() → remove last
    fruits.pop();

4.3 unshift() → add at start
    fruits.unshift("kiwi");

4.4 shift() → remove first
    fruits.shift();

Example:
    let numbers = [1, 2, 3];
    numbers.push(4);     // [1,2,3,4]
    numbers.pop();       // [1,2,3]
    numbers.unshift(0);  // [0,1,2,3]
    numbers.shift();     // [1,2,3]

-------------------------------------------------------------

5. ARRAY METHODS – INTERMEDIATE
-------------------------------
5.1 indexOf() → find index of element
    console.log(fruits.indexOf("mango")); // 2

5.2 includes() → check if value exists
    console.log(fruits.includes("apple")); // true

5.3 slice(start, end) → extract portion (non-destructive)
    console.log(fruits.slice(0,2)); // ["apple","grapes"]

5.4 splice(start, deleteCount, ...items) → add/remove elements
    fruits.splice(1,1,"pear"); // replaces grapes with pear

-------------------------------------------------------------

6. ITERATING OVER ARRAYS
------------------------
6.1 for loop:
    for(let i=0; i<fruits.length; i++){
      console.log(fruits[i]);
    }

6.2 for...of loop:
    for(let fruit of fruits){
      console.log(fruit);
    }

6.3 forEach():
    fruits.forEach((fruit, index) => {
      console.log(index, fruit);
    });

-------------------------------------------------------------

7. ADVANCED METHODS
-------------------
7.1 map() → transform array values
    const nums = [1,2,3];
    const doubled = nums.map(n => n*2); // [2,4,6]

7.2 filter() → select based on condition
    const even = nums.filter(n => n%2===0); // [2]

7.3 reduce() → accumulate into single value
    const sum = nums.reduce((acc, n) => acc+n, 0); // 6

7.4 find() → first matching element
    const val = nums.find(n => n>1); // 2

7.5 some() → returns true if any match
    console.log(nums.some(n => n>2)); // true

7.6 every() → true if all match
    console.log(nums.every(n => n>0)); // true

-------------------------------------------------------------

8. MULTIDIMENSIONAL ARRAYS
--------------------------
8.1 Arrays inside arrays.
Example:
    const matrix = [
      [1,2,3],
      [4,5,6],
      [7,8,9]
    ];

    console.log(matrix[1][2]); // 6

-------------------------------------------------------------

9. SPREAD & DESTRUCTURING
-------------------------
9.1 Spread:
    const arr1 = [1,2];
    const arr2 = [3,4];
    const merged = [...arr1, ...arr2]; // [1,2,3,4]

9.2 Destructuring:
    const [first, second] = fruits;
    console.log(first); // apple

-------------------------------------------------------------

10. SUMMARY / KEY TAKEAWAYS
---------------------------
10.1 Arrays = ordered collection of values.
10.2 Access via index (0-based).
10.3 Use push/pop, shift/unshift to add/remove elements.
10.4 Use slice/splice for extracting/inserting.
10.5 Iterate with for, for...of, or forEach.
10.6 map, filter, reduce = most important higher-order methods.
10.7 Use spread (...) and destructuring for modern clean syntax.

-------------------------------------------------------------

